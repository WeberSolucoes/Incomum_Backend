name: Deploy Django Backend

on:
  push:
    branches:
      - sprint  # branch de desenvolvimento
      - qa      # branch de staging
      - main    # branch de produção
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
      - name: Copy Files to VPS
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvc --delete"
          SOURCE: "."
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_TARGET_DEV }}
            
      - name: Deploy para VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            if [ "${{ github.ref }}" == "refs/heads/sprint" ]; then
              cd ${{ secrets.REMOTE_TARGET_DEV }}
              python3 -m venv venv
              source venv/bin/activate
              git checkout sprint
              cat <<EOF > .env
            ${{ secrets.ENV_DEV }}
            EOF
              git pull origin sprint
              pip install -r requirements.txt
              python3 manage.py migrate
              python3 manage.py collectstatic --noinput
              sudo systemctl restart viagemincomum-dev
            elif [ "${{ github.ref }}" == "refs/heads/qa" ]; then
              cd ${{ secrets.REMOTE_TARGET_STAGE }}
              python3 -m venv venv
              source venv/bin/activate
              git checkout qa
              cat <<EOF > .env
            ${{ secrets.ENV_STAGE }}
            EOF
              git pull origin qa
              pip install -r requirements.txt
              python3 manage.py migrate
              sudo systemctl restart viagemincomum-stage
            elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
              cd ${{ secrets.REMOTE_TARGET_PROD }}
              python3 -m venv venv
              source venv/bin/activate
              git checkout main
              cat <<EOF > .env
            ${{ secrets.ENV_PROD }}
            EOF
              git pull origin main
              pip install -r requirements.txt
              python3 manage.py migrate
              sudo systemctl restart viagemincomum-prod
            fi

      # - name: SSH INTO SERVER AND DEPLOY
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST_IP }} -p ${{ secrets.REMOTE_PORT }}
      #     if [ "${{ github.ref }}" == "refs/heads/sprint" ]; then
      #       cd ${{ secrets.REMOTE_TARGET_DEV }}
      #       source venv/bin/activate
      #       git checkout sprint
      #       echo ${{ secrets.ENV_DEV }} > .env
      #       git pull origin sprint
      #       pip install -r requirements.txt
      #       python manage.py migrate
      #       sudo systemctl restart viagemincomum-dev
      #     elif [ "${{ github.ref }}" == "refs/heads/qa" ]; then
      #       cd ${{ secrets.REMOTE_TARGET_STAGE }}
      #       source venv/bin/activate
      #       git checkout qa
      #       echo ${{ secrets.ENV_STAGE }} > .env
      #       git pull origin qa
      #       pip install -r requirements.txt
      #       python manage.py migrate
      #       sudo systemctl restart viagemincomum-stage
      #     elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
      #       cd ${{ secrets.REMOTE_TARGET_PROD }}
      #       source venv/bin/activate
      #       git checkout main
      #       echo ${{ secrets.ENV_PROD }} > .env
      #       git pull origin main
      #       pip install -r requirements.txt
      #       python manage.py migrate
      #       sudo systemctl restart viagemincomum-prod
      #     fi
      #   env:
      #     REMOTE_PASSWORD: ${{ secrets.SERVER_SSH_PASSPHRASE }}

          


          
